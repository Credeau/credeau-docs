{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Credeau Product Documentation","text":"<p>Get started with Credeau\u2019s products using our comprehensive guides and technical documentation. Whether you're integrating, deploying, or exploring features \u2014 everything you need is right here.</p>"},{"location":"#available-products","title":"Available Products","text":"<ul> <li>MobileForge</li> </ul>"},{"location":"products/mobileforge/","title":"MobileForge","text":"<p>MobileForge ensures that all data collected from user devices is securely transmitted directly to the institution\u2019s infrastructure, where profiling and processing take place \u2014 maintaining full control and compliance within institutional premises.</p>"},{"location":"products/mobileforge/#key-features","title":"Key Features","text":"<ul> <li>Modular architecture</li> <li>Scalable deployment options</li> <li>Robust data syncing with minimal drops</li> <li>Powerful data features and insights for user profiling  </li> <li>Utilizes open-source databases (MongoDB and PostgreSQL) for efficient and reliable data storage</li> </ul> <p>Explore the sections below to learn more about MobileForge's components, deployment strategies, scaling guidelines, and data schemas.</p>"},{"location":"products/mobileforge/#architecture-overview","title":"Architecture Overview","text":"<p>The diagram below illustrates a typical deployment of the MobileForge platform on AWS. It is intended as a reference architecture showcasing how various components work together in a production-grade setup.</p> <p></p> <p>This architecture highlights key components such as data ingestion from mobile devices, secure transmission to institutional infrastructure, robust data syncing, and the combined use of MongoDB and PostgreSQL for optimized storage and profiling operations.</p>"},{"location":"products/mobileforge/components/","title":"Components","text":"<p>MobileForge is built on two primary pipelines \u2014 the Sync Pipeline and the Insights Pipeline, each composed of modular services that can be independently scaled and deployed.</p>"},{"location":"products/mobileforge/components/#sync-pipeline","title":"Sync Pipeline","text":"<p>Responsible for securely ingesting data from mobile devices and storing it for downstream processing.</p> <p></p> <p>Components:</p> <ul> <li> <p>Producer API: Receives raw data from mobile clients.</p> </li> <li> <p>Kafka Stream: Serves as the backbone for streaming data reliably between services.</p> </li> <li> <p>Data Consumers: Process and store incoming data from Kafka.</p> <ul> <li>SMS Data Consumer</li> <li>Events Data Consumer</li> <li>Device/Apps Data Consumer</li> </ul> </li> <li> <p>Databases (Write Layer):</p> <ul> <li>MongoDB: Used for handling unstructured or semi-structured data.</li> <li>PostgreSQL: Stores structured and relational data with integrity constraints.</li> </ul> </li> </ul>"},{"location":"products/mobileforge/components/#insights-pipeline","title":"Insights Pipeline","text":"<p>Provides APIs for reading, profiling, and deriving insights from the synced data.</p> <p></p> <p>Components:</p> <ul> <li> <p>Insights API: Delivers processed insights to institutional systems.</p> </li> <li> <p>SMS Extraction API: Extracts relevant financial signals from SMS data.</p> </li> <li> <p>Databases (Read Layer):</p> <ul> <li>MongoDB: Separate database instance within the same cluster, optimized for read access.</li> <li>PostgreSQL: Read-optimized schema for efficient querying and reporting.</li> </ul> </li> </ul> <p>Each component is designed to be modular, allowing independent scaling, deployment, and monitoring depending on workload or use-case.</p>"},{"location":"products/mobileforge/scaling/","title":"Scaling MobileForge","text":""},{"location":"products/mobileforge/scaling/#overview","title":"Overview","text":"<p>MobileForge supports horizontal and vertical scaling to accommodate varying workloads.</p>"},{"location":"products/mobileforge/scaling/#scaling-strategies","title":"Scaling Strategies","text":"<ul> <li>Horizontal Scaling: Add more instances of services to distribute load.</li> <li>Vertical Scaling: Increase resources (CPU, RAM) of existing instances.</li> </ul>"},{"location":"products/mobileforge/scaling/#resource-provisioning","title":"Resource Provisioning","text":"<ul> <li>Monitor system metrics to determine scaling needs.</li> <li>Use container orchestration tools (e.g., Kubernetes) for automated scaling.</li> </ul>"},{"location":"products/mobileforge/data-schemas/mongo/","title":"MongoDB Data Schema","text":""},{"location":"products/mobileforge/data-schemas/mongo/#collections","title":"Collections","text":""},{"location":"products/mobileforge/data-schemas/mongo/#users","title":"users","text":"<ul> <li>_id: ObjectId</li> <li>username: String</li> <li>email: String</li> <li>created_at: DateTime</li> </ul>"},{"location":"products/mobileforge/data-schemas/mongo/#sessions","title":"sessions","text":"<ul> <li>_id: ObjectId</li> <li>user_id: ObjectId (Reference to users)</li> <li>token: String</li> <li>expires_at: DateTime</li> </ul>"},{"location":"products/mobileforge/data-schemas/mongo/#indexes","title":"Indexes","text":"<ul> <li><code>users.email</code>: Unique</li> <li><code>sessions.token</code>: Unique</li> </ul>"},{"location":"products/mobileforge/data-schemas/postgres/","title":"PostgreSQL Data Schema","text":""},{"location":"products/mobileforge/data-schemas/postgres/#tables","title":"Tables","text":""},{"location":"products/mobileforge/data-schemas/postgres/#users","title":"users","text":"<ul> <li>id: SERIAL PRIMARY KEY</li> <li>username: VARCHAR(50)</li> <li>email: VARCHAR(100)</li> <li>created_at: TIMESTAMP</li> </ul>"},{"location":"products/mobileforge/data-schemas/postgres/#sessions","title":"sessions","text":"<ul> <li>id: SERIAL PRIMARY KEY</li> <li>user_id: INTEGER REFERENCES users(id)</li> <li>token: VARCHAR(255)</li> <li>expires_at: TIMESTAMP</li> </ul>"},{"location":"products/mobileforge/data-schemas/postgres/#indexes","title":"Indexes","text":"<ul> <li><code>users_email_idx</code> on users(email)</li> <li><code>sessions_token_idx</code> on sessions(token)</li> </ul>"},{"location":"products/mobileforge/deployment/development/","title":"Deployment: Development Environment","text":""},{"location":"products/mobileforge/deployment/development/#overview","title":"Overview","text":"<p>This development environment is designed to emulate the production setup of MobileForge while maintaining a minimal resource footprint. By allocating modest CPU and memory resources to each component, we ensure cost-effective operations suitable for development and testing purposes. For environments expecting higher traffic volumes, please consult the Scaling Guide for appropriate adjustments.</p>"},{"location":"products/mobileforge/deployment/development/#option-1-using-docker-on-individual-servers-with-aws-ec2-auto-scaling","title":"Option 1: Using Docker on Individual Servers with AWS EC2 Auto Scaling","text":""},{"location":"products/mobileforge/deployment/development/#architecture-overview","title":"Architecture Overview","text":"<p>The diagram below illustrates a typical deployment of the MobileForge platform on AWS using services running as Docker containers on EC2 machines within AutoScaling Groups. It is intended as a reference architecture showcasing how various components work together in a functional setup.</p> <p></p>"},{"location":"products/mobileforge/deployment/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on all servers.</li> <li>AWS CLI configured with necessary permissions.</li> <li>CloudWatch Agent installed on EC2 instances to collect memory metrics.</li> <li>IAM Roles with permissions for EC2, Auto Scaling, and CloudWatch.</li> </ul>"},{"location":"products/mobileforge/deployment/development/#deployment-steps","title":"Deployment Steps","text":""},{"location":"products/mobileforge/deployment/development/#create-launch-templates-with-user-data-scripts","title":"Create Launch Templates with User Data Scripts","text":"<p>Define launch templates for each component, specifying the AMI, instance type, security groups, iam role and user data scripts to start Docker containers with volume mounts for stateful components.</p> <p>AMI -</p> <p>Use <code>ami-082a662d6297ab2a2</code> (ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20250425) or similar.</p> <p>For faster deployments, prepare a custom AMI with OS of choice and pre-installed prerequisites like Docker engine, AWS CLI, CloudwatchAgent etc ...</p> <p>Instance Type -</p> <p>Use small instances like <code>t3a.small / t3a.medium</code> for minimal setup.</p> <p>Security Group -</p> <p>Ensure the servers have relevant access for limited users. Expose the following ports -</p> <ol> <li><code>2181</code> and <code>9092</code> for Kafka open for VPC CIDR or specific security groups (Producer &amp; Consumer).</li> <li><code>27017</code> for MongoDB open for VPC CIDR or specific security groups (Consumer &amp; Insights).</li> <li><code>5432</code> for PostgreSQL open for VPC CIDR or specific security groups (Producer, Consumer &amp; Insights).</li> <li><code>8000</code> for Producer &amp; Insights open for load balancers in public networks.</li> <li><code>8082</code> for SMS Extraction open for VPC CIDR and load balancer specific security groups.</li> </ol> <p>Iam Role &amp; Policy -</p> <p>Role trust relationship</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n                \"Service\": \"ec2.amazonaws.com\"\n            },\n            \"Effect\": \"Allow\"\n        }\n    ]\n  }\n</code></pre> <p>Policy to attach</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n        {\n            \"Sid\": \"ECRLogin\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ecr:GetAuthorizationToken\"\n            ],\n            \"Resource\": \"*\"\n        },\n    {\n        \"Sid\": \"ECRPull\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"ecr:BatchCheckLayerAvailability\",\n            \"ecr:GetDownloadUrlForLayer\",\n            \"ecr:BatchGetImage\"\n        ],\n        \"Resource\": \"arn:aws:ecr:&lt;region&gt;:&lt;account-id&gt;:repository/&lt;repo-name&gt;\"\n    }\n  ]\n}\n</code></pre> <p>User Data script for Producer/Consumer/Insights -</p> <pre><code>#!/bin/bash\n\n# Add installations steps for Docker Engine &amp; AWS CLI if not using custom AMI with these pre-requisites met\n\n# GCA Setup\naws ecr get-login-password --region \"&lt;aws_region&gt;\" | docker login --username AWS --password-stdin \"&lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repository&gt;:&lt;version&gt;\"\n\ndocker pull \"&lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repository&gt;:&lt;version&gt;\"\n\ndocker run -d \\\n        --name &lt;application&gt; \\\n        --network=host \\\n        -p &lt;exposed_port&gt;:&lt;internal_port&gt; \\\n        ...&lt;environment_variables&gt; \\\n        --restart always \\\n        \"&lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;repository&gt;:&lt;version&gt;\"\n</code></pre>"},{"location":"products/mobileforge/deployment/development/#set-up-auto-scaling-groups-asgs","title":"Set Up Auto Scaling Groups (ASGs)","text":"<p>For each component -</p> <ul> <li>Create an ASG using the corresponding launch template.</li> <li>Define Scaling Policies:<ul> <li>CPU Utilization: Target average CPU usage (e.g., 50%).</li> <li>Memory Utilization: Target average memory usage (e.g., 70%).</li> </ul> </li> </ul>"},{"location":"products/mobileforge/deployment/development/#option-2-using-kubernetes-with-horizontal-pod-autoscalers-hpas","title":"Option 2: Using Kubernetes with Horizontal Pod Autoscalers (HPAs)","text":""},{"location":"products/mobileforge/deployment/development/#prerequisites_1","title":"Prerequisites","text":"<ol> <li>Kubernetes Cluster with at least 7 nodes.</li> <li>Metrics Server deployed in the cluster.</li> <li>Persistent Volume Claims (PVCs) and Storage Classes set up for stateful components.</li> </ol>"},{"location":"products/mobileforge/deployment/development/#deployment-steps_1","title":"Deployment Steps","text":""},{"location":"products/mobileforge/deployment/development/#deploy-components-with-resource-requests-and-limits","title":"Deploy Components with Resource Requests and Limits","text":"<p>Define deployments for each component, specifying resource requests and limits to enable HPA functionality:</p> <p>MongoDB -</p> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mongodb\nspec:\n  serviceName: \"mongodb\"\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n      - name: mongodb\n        image: mongo:7.0\n        ports:\n        - containerPort: 27017\n        env:\n        - name: MONGO_INITDB_ROOT_USERNAME\n          value: credeau\n        - name: MONGO_INITDB_ROOT_PASSWORD\n          value: 123456\n        volumeMounts:\n        - name: mongo-storage\n          mountPath: /data/db\n  volumeClaimTemplates:\n  - metadata:\n      name: mongo-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi\n</code></pre> <p>PostgreSQL -</p> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\nspec:\n  serviceName: \"postgres\"\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:16\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_USER\n          value: credeau\n        - name: POSTGRES_PASSWORD\n          value: 123456\n        - name: POSTGRES_DB\n          value: api_insights_db\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi\n</code></pre> <p>Zookeeper -</p> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: zookeeper\nspec:\n  serviceName: \"zookeeper\"\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zookeeper\n  template:\n    metadata:\n      labels:\n        app: zookeeper\n    spec:\n      containers:\n      - name: zookeeper\n        image: confluentinc/cp-zookeeper:7.5.0\n        ports:\n        - containerPort: 2181\n        volumeMounts:\n        - name: zookeeper-storage\n          mountPath: /var/lib/zookeeper\n  volumeClaimTemplates:\n  - metadata:\n      name: zookeeper-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi\n</code></pre> <p>Kafka -</p> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: kafka\nspec:\n  serviceName: \"kafka\"\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kafka\n  template:\n    metadata:\n      labels:\n        app: kafka\n    spec:\n      containers:\n      - name: kafka\n        image: confluentinc/cp-kafka:7.5.0\n        ports:\n        - containerPort: 9092\n        env:\n        - name: KAFKA_BROKER_ID\n          value: \"1\"\n        - name: KAFKA_ZOOKEEPER_CONNECT\n          value: zookeeper:2181\n        - name: KAFKA_LISTENERS\n          value: PLAINTEXT://:9092\n        - name: KAFKA_ADVERTISED_LISTENERS\n          value: PLAINTEXT://kafka:9092\n        volumeMounts:\n        - name: kafka-storage\n          mountPath: /var/lib/kafka\n  volumeClaimTemplates:\n  - metadata:\n      name: kafka-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi\n</code></pre> <p>Producer API -</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: producer-api\nspec:\n  selector:\n    app: producer-api\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8000\n  type: LoadBalancer\n</code></pre> <p>Consumer -</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: consumer-api\n  labels:\n    app: consumer-api\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: consumer-api\n  template:\n    metadata:\n      labels:\n        app: consumer-api\n    spec:\n      containers:\n      - name: consumer-api\n        image: &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/consumer-api:&lt;version&gt;\n        ports:\n        - containerPort: 8001\n        env:\n        - name: DI_POSTGRES_USERNAME\n          value: credeau\n        - name: DI_POSTGRES_PASSWORD\n          value: 123456\n        - name: DI_POSTGRES_HOST\n          value: postgres\n        - name: DI_POSTGRES_PORT\n          value: \"5432\"\n        - name: DI_POSTGRES_DATABASE\n          value: api_insights_db\n        - name: DI_POSTGRES_SYNC_DATABASE\n          value: sync_db\n</code></pre> <p>Insights API -</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: insights-api\nspec:\n  selector:\n    app: insights-api\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8003\n  type: LoadBalancer\n</code></pre> <p>SMS Extraction API -</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: sms-extraction-api\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-internal: \"true\"\nspec:\n  selector:\n    app: sms-extraction-api\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8002\n  type: LoadBalancer\n</code></pre>"},{"location":"products/mobileforge/deployment/development/#configure-horizontal-pod-autoscalers-hpas","title":"Configure Horizontal Pod Autoscalers (HPAs)","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n    name: producer-api-hpa\nspec:\n    scaleTargetRef:\n        apiVersion: apps/v1\n        kind: Deployment\n        name: producer-api\n    minReplicas: 2\n    maxReplicas: 10\n    metrics:\n    - type: Resource\n        resource:\n            name: cpu\n            target:\n                type: Utilization\n                averageUtilization: 50\n    - type: Resource\n        resource:\n            name: memory\n            target:\n                type: Utilization\n                averageUtilization: 70\n</code></pre>"},{"location":"products/mobileforge/deployment/development/#monitor-and-adjust","title":"Monitor and Adjust","text":"<p>Use <code>kubectl get hpa</code> to monitor scaling activities and adjust thresholds as needed.</p>"},{"location":"products/mobileforge/deployment/development/#managing-host-addresses-across-deployments","title":"Managing Host Addresses Across Deployments","text":""},{"location":"products/mobileforge/deployment/development/#docker-deployments","title":"Docker Deployments","text":"<ul> <li>DNS Configuration: Use AWS Route 53 or another DNS service to assign domain names to each EC2 instance.</li> <li>Environment Variables: Pass host addresses as environment variables to Docker containers.</li> </ul>"},{"location":"products/mobileforge/deployment/development/#kubernetes-deployments","title":"Kubernetes Deployments","text":"<ul> <li>Services: Kubernetes Services provide stable DNS names for pods.</li> <li>Environment Variables: Use ConfigMaps or environment variables to pass service addresses to pods.</li> </ul>"},{"location":"products/mobileforge/deployment/production/","title":"Deployment: Production Environment","text":""},{"location":"products/mobileforge/deployment/testing/","title":"Deployment: Testing Environment","text":""},{"location":"products/mobileforge/deployment/testing/#overview","title":"Overview","text":"<p>The testing environment simulates the full MobileForge data flow using containerized components. All services \u2014 including APIs, Kafka, Consumers, and Databases \u2014 are launched using Docker Compose, with production-like images pulled from AWS ECR.</p> <p>This environment is intended for functional testing on local machines or lightweight servers. It replicates the full data flow pipeline for validation, debugging, and integration testing.</p>"},{"location":"products/mobileforge/deployment/testing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>AWS CLI installed and configured (<code>aws configure</code>)</li> <li>Access to Credeau's private ECR repository</li> </ul>"},{"location":"products/mobileforge/deployment/testing/#deployment-steps","title":"Deployment Steps","text":""},{"location":"products/mobileforge/deployment/testing/#step-1-authenticate-with-aws-ecr","title":"Step 1: Authenticate with AWS ECR","text":"<p>Run the following command to authenticate Docker with AWS ECR:</p> <pre><code>aws ecr get-login-password --region &lt;region&gt; | docker login --username AWS --password-stdin &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com\n</code></pre>"},{"location":"products/mobileforge/deployment/testing/#step-2-create-docker-composetestingyml","title":"Step 2: Create <code>docker-compose.testing.yml</code>","text":"<pre><code>version: 3.8\n\nservices:\n\n    zookeeper:\n        image: confluentinc/cp-zookeeper:7.5.0\n        environment:\n        ZOOKEEPER_CLIENT_PORT: 2181\n\n    kafka:\n        image: confluentinc/cp-kafka:7.5.0\n        depends_on:\n            - zookeeper\n        environment:\n            KAFKA_BROKER_ID: 1\n            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n            KAFKA_LISTENERS: PLAINTEXT://:9092\n            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n\n    mongo:\n        image: mongo:7.0\n        environment:\n            MONGO_INITDB_ROOT_USERNAME: credeau\n            MONGO_INITDB_ROOT_PASSWORD: 123456\n            MONGO_INITDB_DATABASE: sync_db\n        ports:\n            - 27017:27017\n\n    postgres:\n        image: postgres:16\n        environment:\n            POSTGRES_USER: credeau\n            POSTGRES_PASSWORD: 123456\n            POSTGRES_DB: api_insights_db\n        ports:\n            - 5432:5432\n\n    producer-api:\n        image: &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/producer-api:&lt;version&gt;\n        environment:\n            DI_POSTGRES_USERNAME: credeau\n            DI_POSTGRES_PASSWORD: 123456\n            DI_POSTGRES_HOST: postgres\n            DI_POSTGRES_PORT: 5432\n            DI_POSTGRES_DATABASE: api_insights_db\n            DI_POSTGRES_SYNC_DATABASE: sync_db\n            DI_MONGODB_USERNAME: credeau\n            DI_MONGODB_PASSWORD: 123456\n            DI_MONGODB_HOST: mongo\n            DI_MONGODB_PORT: 27017\n            DI_MONGODB_DATABASE: sync_db\n            DI_MONGODB_ENABLED_SOURCES: *\n            DI_KAFKA_BROKER_ENDPOINT: kafka:9092\n        depends_on:\n            - kafka\n            - postgres\n        ports:\n            - 8000:8000\n\n    common-consumer:\n        image: &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/data-consumer:&lt;version&gt;\n        environment:\n            DI_POSTGRES_USERNAME: credeau\n            DI_POSTGRES_PASSWORD: 123456\n            DI_POSTGRES_HOST: postgres\n            DI_POSTGRES_PORT: 5432\n            DI_POSTGRES_DATABASE: api_insights_db\n            DI_POSTGRES_SYNC_DATABASE: sync_db\n            DI_MONGODB_USERNAME: credeau\n            DI_MONGODB_PASSWORD: 123456\n            DI_MONGODB_HOST: mongo\n            DI_MONGODB_PORT: 27017\n            DI_MONGODB_DATABASE: sync_db\n            DI_MONGODB_ENABLED_SOURCES: *\n            DI_KAFKA_BROKER_ENDPOINT: kafka:9092\n        depends_on:\n            - kafka\n            - mongo\n            - postgres\n\n    sms-extraction-api:\n        image: &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/sms-extraction-api:&lt;version&gt;\n        environment:\n            DB_USER: credeau\n            DB_PASSWORD: 123456\n            DB_HOST: postgres\n            DB_PORT: 5432\n            DB_NAME: api_insights_db\n            MAX_SMS_COUNT: 1000\n            DB_ENCRYPTION_KEY: &lt;encryption key&gt;\n        depends_on:\n            - postgres\n        ports:\n            - 8082:8082\n\n    insights-api:\n        image: &lt;aws_account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/insights-api:&lt;version&gt;\n        environment:\n            LAUNCH_ENVIRONMENT: testing\n            DI_POSTGRES_USERNAME: credeau\n            DI_POSTGRES_PASSWORD: 123456\n            DI_POSTGRES_HOST: postgres\n            DI_POSTGRES_PORT: 5432\n            DI_POSTGRES_DATABASE: api_insights_db\n            DI_POSTGRES_SYNC_DATABASE: sync_db\n            DI_KAFKA_BROKER_ENDPOINT: kafka:9092\n            SMS_EXTRACTOR_SERVICE_URL: sms-extraction-api\n            SMS_EXTRACTOR_BATCH_SIZE: 1000\n            DI_MONGODB_USERNAME: credeau\n            DI_MONGODB_PASSWORD: 123456\n            DI_MONGODB_HOST: mongo\n            DI_MONGODB_PORT: 27017\n            DI_MONGODB_DATABASE: sync_db\n            DI_MONGODB_ENABLED_SOURCES: *\n        depends_on:\n            - mongo\n            - postgres\n            - sms-extraction-api\n        ports:\n            - 8001:8000\n</code></pre>"},{"location":"products/mobileforge/deployment/testing/#step-3-start-the-stack","title":"Step 3: Start the Stack","text":"<pre><code>docker compose -f docker-compose.testing.yml up -d --pull always\n</code></pre>"},{"location":"products/mobileforge/deployment/testing/#step-4-verify","title":"Step 4: Verify","text":"<pre><code>docker compose ps\n</code></pre>"}]}